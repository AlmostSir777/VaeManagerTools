/*
 * Generated by dtrace(1M).
 */

#ifndef	_RACSIGNALPROVIDER_H
#define	_RACSIGNALPROVIDER_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define RACSIGNAL_STABILITY "___dtrace_stability$RACSignal$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define RACSIGNAL_TYPEDEFS "___dtrace_typedefs$RACSignal$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	RACSIGNAL_COMPLETED(arg0, arg1) \
do { \
	__asm__ volatile(".reference " RACSIGNAL_TYPEDEFS); \
	__dtrace_probe$RACSignal$completed$v1$63686172202a$63686172202a(arg0, arg1); \
	__asm__ volatile(".reference " RACSIGNAL_STABILITY); \
} while (0)
#define	RACSIGNAL_COMPLETED_ENABLED() \
	({ int _r = __dtrace_isenabled$RACSignal$completed$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	RACSIGNAL_ERROR(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " RACSIGNAL_TYPEDEFS); \
	__dtrace_probe$RACSignal$error$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " RACSIGNAL_STABILITY); \
} while (0)
#define	RACSIGNAL_ERROR_ENABLED() \
	({ int _r = __dtrace_isenabled$RACSignal$error$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	RACSIGNAL_NEXT(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " RACSIGNAL_TYPEDEFS); \
	__dtrace_probe$RACSignal$next$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " RACSIGNAL_STABILITY); \
} while (0)
#define	RACSIGNAL_NEXT_ENABLED() \
	({ int _r = __dtrace_isenabled$RACSignal$next$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$RACSignal$completed$v1$63686172202a$63686172202a(const char *, const char *);
extern int __dtrace_isenabled$RACSignal$completed$v1(void);
extern void __dtrace_probe$RACSignal$error$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$RACSignal$error$v1(void);
extern void __dtrace_probe$RACSignal$next$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$RACSignal$next$v1(void);

#else

#define	RACSIGNAL_COMPLETED(arg0, arg1) \
do { \
	} while (0)
#define	RACSIGNAL_COMPLETED_ENABLED() (0)
#define	RACSIGNAL_ERROR(arg0, arg1, arg2) \
do { \
	} while (0)
#define	RACSIGNAL_ERROR_ENABLED() (0)
#define	RACSIGNAL_NEXT(arg0, arg1, arg2) \
do { \
	} while (0)
#define	RACSIGNAL_NEXT_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _RACSIGNALPROVIDER_H */
